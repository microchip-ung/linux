# SPDX-License-Identifier: GPL-2.0-only OR BSD-2-Clause
%YAML 1.2
---
$id: http://devicetree.org/schemas/net/microchip,lan969x-switch.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Microchip lan969x Ethernet switch controller

maintainers:
  - Daniel Machon  <daniel.machon@microchip.com>

description: |
  The lan969x Enterprise Ethernet switch family provides a rich set of
  Enterprise switching features such as advanced TCAM-based VLAN and
  QoS processing enabling delivery of differentiated services, and
  security through TCAM-based frame processing using versatile content
  aware processor (VCAP).

  IPv4/IPv6 Layer 3 (L3) unicast and multicast routing is supported
  with up to 18K IPv4/9K IPv6 unicast LPM entries and up to 9K IPv4/3K
  IPv6 (S,G) multicast groups.

  L3 security features include source guard and reverse path
  forwarding (uRPF) tasks. Additional L3 features include VRF-Lite and
  IP tunnels (IP over GRE/IP).

  The lan969x switch family targets managed Layer 2 and Layer 3
  equipment in SMB, SME, and Enterprise where high port count
  1G/2.5G/5G/10G switching with 10G/25G aggregation links is required.

properties:
  $nodename:
    pattern: "^switch@[0-9a-f]+$"

  compatible:
    const: microchip,lan969x-switch

  reg:
    items:
      - description: cpu target
      - description: devices target

  reg-names:
    items:
      - const: cpu
      - const: devices

  interrupts:
    minItems: 1
    items:
      - description: register based extraction
      - description: frame dma based extraction
      - description: ptp interrupt

  interrupt-names:
    minItems: 1
    items:
      - const: xtr
      - const: fdma
      - const: ptp

  resets:
    items:
      - description: Reset controller used for switch core reset (soft reset)

  reset-names:
    items:
      - const: switch

  mac-address: true

  ethernet-ports:
    type: object
    additionalProperties: false

    properties:
      '#address-cells':
        const: 1
      '#size-cells':
        const: 0

    patternProperties:
      "^port@[0-9a-f]+$":
        $ref: /schemas/net/ethernet-controller.yaml#
        unevaluatedProperties: false

        properties:
          reg:
            description: Switch port number

          phys:
            maxItems: 1
            description:
              phandle of a Ethernet SerDes PHY.  This defines which SerDes
              instance will handle the Ethernet traffic.

          microchip,bandwidth:
            description: Specifies bandwidth in Mbit/s allocated to the port.
            $ref: "/schemas/types.yaml#/definitions/uint32"
            maximum: 10000

          microchip,sd-sgpio:
            description:
              Index of the ports Signal Detect SGPIO in the set of 384 SGPIOs
              This is optional, and only needed if the default used index is
              is not correct.
            $ref: "/schemas/types.yaml#/definitions/uint32"
            minimum: 0
            maximum: 383

        required:
          - reg
          - phys
          - phy-mode
          - microchip,bandwidth

        oneOf:
          - required:
              - phy-handle
          - required:
              - sfp
              - managed

required:
  - compatible
  - reg
  - reg-names
  - interrupts
  - interrupt-names
  - ethernet-ports

additionalProperties: false

examples:
  - |
    #include <dt-bindings/interrupt-controller/arm-gic.h>
		switch: switch@e0000000 {
			compatible = "microchip,lan969x-switch";
			reg = <0xe00c0000 0x0010000>,
			      <0xe2010000 0x13f0000>;
      reg-names = "cpu", "dev";
			interrupt-names = "xtr", "fdma", "ptp";
			interrupts = <GIC_SPI 10 IRQ_TYPE_LEVEL_HIGH>,
				     <GIC_SPI 88 IRQ_TYPE_LEVEL_HIGH>,
				     <GIC_SPI  8 IRQ_TYPE_LEVEL_HIGH>;
			resets = <&reset 0>;
			reset-names = "switch";
			status = "okay";
ethernet-ports {
		#address-cells = <1>;
		#size-cells = <0>;

		port0: port@0 {
			reg = <0>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy4>;
			phy-mode = "qsgmii";
			phys = <&serdes 0>;
		};

		port1: port@1 {
			reg = <1>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy5>;
			phy-mode = "qsgmii";
			phys = <&serdes 0>;
		};

		port2: port@2 {
			reg = <2>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy6>;
			phy-mode = "qsgmii";
			phys = <&serdes 0>;
		};

		port3: port@3 {
			reg = <3>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy7>;
			phy-mode = "qsgmii";
			phys = <&serdes 0>;
		};

		port4: port@4 {
			reg = <4>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy8>;
			phy-mode = "qsgmii";
			phys = <&serdes 1>;
		};

		port5: port@5 {
			reg = <5>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy9>;
			phy-mode = "qsgmii";
			phys = <&serdes 1>;
		};

		port6: port@6 {
			reg = <6>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy10>;
			phy-mode = "qsgmii";
			phys = <&serdes 1>;
		};

		port7: port@7 {
			reg = <7>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy11>;
			phy-mode = "qsgmii";
			phys = <&serdes 1>;
		};

		port24: port@24 {
			reg = <24>;
			microchip,bandwidth = <10000>;
			phys = <&serdes 6>;
			phy-mode = "10gbase-r";
			sfp = <&sfp0>;
			microchip,sd-sgpio = <365>;
			managed = "in-band-status";
		};

		port25: port@25 {
			reg = <25>;
			microchip,bandwidth = <10000>;
			phys = <&serdes 7>;
			phy-mode = "10gbase-r";
			sfp = <&sfp1>;
			microchip,sd-sgpio = <369>;
			managed = "in-band-status";
		};

		port28: port@28 {
			reg = <28>;
			microchip,bandwidth = <1000>;
			phy-handle = <&phy3>;
			phy-mode = "rgmii";
		};
	};

...
#  vim: set ts=2 sw=2 sts=2 tw=80 et cc=80 ft=yaml :

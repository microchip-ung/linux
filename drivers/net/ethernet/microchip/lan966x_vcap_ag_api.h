/* SPDX-License-Identifier: (GPL-2.0 OR MIT) */
/*
 * Microchip LAN966x Switch driver
 *
 * License: Dual MIT/GPL
 * Copyright (c) 2020 Microchip Technology Inc.
 */

/*
 * This file is autogenerated by cml-utils 2021-04-14 11:08:12 +0200.
 * Commit ID: 17ec1b1aedde68cf721a7ad5356532356a619266
 */

#ifndef _LAN966X_VCAP_AG_API_H_
#define _LAN966X_VCAP_AG_API_H_

#include "lan966x_vcap_ag_layout.h"

/*******************************************************************************
 * VCAP ES0
 ******************************************************************************/
int lan966x_vcap_es0_key_pack(
	const struct lan966x_vcap_es0_key_fields *fields,
	struct lan966x_vcap_data *data);

int lan966x_vcap_es0_action_pack(
	const struct lan966x_vcap_es0_action_fields *fields,
	struct lan966x_vcap_data *data);

/*******************************************************************************
 * VCAP IS1
 ******************************************************************************/
int lan966x_vcap_is1_key_pack(
	const struct lan966x_vcap_is1_key_fields *fields,
	struct lan966x_vcap_data *data);

int lan966x_vcap_is1_action_pack(
	const struct lan966x_vcap_is1_action_fields *fields,
	struct lan966x_vcap_data *data);

/*******************************************************************************
 * VCAP IS2
 ******************************************************************************/
int lan966x_vcap_is2_key_pack(
	const struct lan966x_vcap_is2_key_fields *fields,
	struct lan966x_vcap_data *data);

int lan966x_vcap_is2_action_pack(
	const struct lan966x_vcap_is2_action_fields *fields,
	struct lan966x_vcap_data *data);

/*******************************************************************************
 * VCAP Common
 ******************************************************************************/
#define LAN966X_VCAP_MAX_SW_WIDTH                                        96
#define LAN966X_VCAP_MAX_STICKY_WIDTH                                    32
#define LAN966X_VCAP_MAX_ACT_WIDTH                                      123

#define LAN966X_VCAP_MAX_NUM_KEYS                                        13
#define LAN966X_VCAP_MAX_NUM_ACTIONS                                      2

enum lan966x_vcap {
	LAN966X_VCAP_ES0,
	LAN966X_VCAP_IS1,
	LAN966X_VCAP_IS2,
	LAN966X_VCAP_LAST
};

struct lan966x_vcap_attrs {
	char *name;
	u32 instance;
	u32 rows;
	u32 sw_count;
	u32 sw_width;
	u32 sticky_width;
	u32 act_width;
	u32 default_cnt;
	u32 require_cnt_dis;
	u32 version;
};

const struct lan966x_vcap_attrs *lan966x_vcap_attrs_get(
	enum lan966x_vcap vcap);

struct lan966x_vcap_tg_bit {
	u32 width;
	u32 val;
};

struct lan966x_vcap_tgs_attrs {
	char *name;
	u32 tg_width;
	u32 tg_val;
	u32 type_width;
	u32 max_width;
	struct lan966x_vcap_tg_bit tg_bits[4];
};

const struct lan966x_vcap_tgs_attrs *lan966x_vcap_key_tgs_attrs_get(
	enum lan966x_vcap vcap,
	u32 sw_per_entry);

const struct lan966x_vcap_tgs_attrs *lan966x_vcap_action_tgs_attrs_get(
	enum lan966x_vcap vcap,
	u32 sw_per_entry);

struct lan966x_vcap_key_attrs {
	char *name;
	u32 type_id;
	u32 type_width;
	u32 width;
	u32 sw_per_entry;
	u32 sw_cnt;
};

const struct lan966x_vcap_key_attrs *lan966x_vcap_key_attrs_get(
	enum lan966x_vcap vcap,
	int key);

struct lan966x_vcap_action_attrs {
	char *name;
	u32 type_id;
	u32 type_width;
	u32 width;
	u32 sw_per_action;
	u32 sw_cnt;
};

const struct lan966x_vcap_action_attrs *lan966x_vcap_action_attrs_get(
	enum lan966x_vcap vcap,
	int action);

#ifdef LAN966X_VCAP_INCLUDE_FIELD_ATTRS

struct lan966x_vcap_field_attrs {
	char *name;
	u32 offset;
	u32 length;
};

const struct lan966x_vcap_field_attrs *lan966x_vcap_key_field_attrs_get(
	enum lan966x_vcap vcap,
	int key,
	u32 index);

const struct lan966x_vcap_field_attrs *lan966x_vcap_action_field_attrs_get(
	enum lan966x_vcap vcap,
	int action,
	u32 index);

#endif /* LAN966X_VCAP_INCLUDE_FIELD_ATTRS */


#endif /* _LAN966X_VCAP_AG_API_H_ */
